/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ParserDelegateInterface extends Interface {
  functions: {
    extractInputLength: TypedFunctionDescription<{
      encode([_rawTx]: [Arrayish]): string;
    }>;

    extractOutputAtIndex: TypedFunctionDescription<{
      encode([_rawTx, _index]: [Arrayish, BigNumberish]): string;
    }>;

    extractOutputLength: TypedFunctionDescription<{
      encode([_rawTx]: [Arrayish]): string;
    }>;

    extractOutputScriptAtIndex: TypedFunctionDescription<{
      encode([_rawTx, _index]: [Arrayish, BigNumberish]): string;
    }>;

    extractOutputValueAtIndex: TypedFunctionDescription<{
      encode([_rawTx, _index]: [Arrayish, BigNumberish]): string;
    }>;
  };

  events: {};
}

export class ParserDelegate extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ParserDelegate;
  attach(addressOrName: string): ParserDelegate;
  deployed(): Promise<ParserDelegate>;

  on(event: EventFilter | string, listener: Listener): ParserDelegate;
  once(event: EventFilter | string, listener: Listener): ParserDelegate;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ParserDelegate;
  removeAllListeners(eventName: EventFilter | string): ParserDelegate;
  removeListener(eventName: any, listener: Listener): ParserDelegate;

  interface: ParserDelegateInterface;

  functions: {
    extractInputLength(
      _rawTx: Arrayish
    ): Promise<{
      numInputs: BigNumber;
      lenInputs: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    extractOutputAtIndex(
      _rawTx: Arrayish,
      _index: BigNumberish
    ): Promise<string>;

    extractOutputLength(
      _rawTx: Arrayish
    ): Promise<{
      numOutputs: BigNumber;
      lenOutputs: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    extractOutputScriptAtIndex(
      _rawTx: Arrayish,
      _index: BigNumberish
    ): Promise<string>;

    extractOutputValueAtIndex(
      _rawTx: Arrayish,
      _index: BigNumberish
    ): Promise<BigNumber>;
  };

  extractInputLength(
    _rawTx: Arrayish
  ): Promise<{
    numInputs: BigNumber;
    lenInputs: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  extractOutputAtIndex(_rawTx: Arrayish, _index: BigNumberish): Promise<string>;

  extractOutputLength(
    _rawTx: Arrayish
  ): Promise<{
    numOutputs: BigNumber;
    lenOutputs: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  extractOutputScriptAtIndex(
    _rawTx: Arrayish,
    _index: BigNumberish
  ): Promise<string>;

  extractOutputValueAtIndex(
    _rawTx: Arrayish,
    _index: BigNumberish
  ): Promise<BigNumber>;

  filters: {};

  estimate: {
    extractInputLength(_rawTx: Arrayish): Promise<BigNumber>;

    extractOutputAtIndex(
      _rawTx: Arrayish,
      _index: BigNumberish
    ): Promise<BigNumber>;

    extractOutputLength(_rawTx: Arrayish): Promise<BigNumber>;

    extractOutputScriptAtIndex(
      _rawTx: Arrayish,
      _index: BigNumberish
    ): Promise<BigNumber>;

    extractOutputValueAtIndex(
      _rawTx: Arrayish,
      _index: BigNumberish
    ): Promise<BigNumber>;
  };
}
