/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface RelayInterface extends Interface {
  functions: {
    DIFFICULTY_ADJUSTMENT_INTERVAL: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    DIFF_TARGET: TypedFunctionDescription<{ encode([]: []): string }>;

    TARGET_TIMESPAN: TypedFunctionDescription<{ encode([]: []): string }>;

    TARGET_TIMESPAN_DIV_4: TypedFunctionDescription<{ encode([]: []): string }>;

    TARGET_TIMESPAN_MUL_4: TypedFunctionDescription<{ encode([]: []): string }>;

    UNROUNDED_MAX_TARGET: TypedFunctionDescription<{ encode([]: []): string }>;

    chains: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    epochStart: TypedFunctionDescription<{ encode([]: []): string }>;

    getBlockHeader: TypedFunctionDescription<{
      encode([_digest]: [Arrayish]): string;
    }>;

    headers: TypedFunctionDescription<{ encode([]: [Arrayish]): string }>;

    heaviestBlock: TypedFunctionDescription<{ encode([]: []): string }>;

    highScore: TypedFunctionDescription<{ encode([]: []): string }>;

    isCorrectDifficultyTarget: TypedFunctionDescription<{
      encode([diffStartHeader, prevBlockHeader, currBlockHeader, _height]: [
        Arrayish,
        Arrayish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;

    submitBlockHeader: TypedFunctionDescription<{
      encode([_header]: [Arrayish]): string;
    }>;
  };

  events: {
    ChainReorg: TypedEventDescription<{
      encodeTopics([_from, _to, _id]: [
        Arrayish | null,
        Arrayish | null,
        BigNumberish | null
      ]): string[];
    }>;

    StoreHeader: TypedEventDescription<{
      encodeTopics([_digest, _height]: [
        Arrayish | null,
        BigNumberish | null
      ]): string[];
    }>;
  };
}

export class Relay extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Relay;
  attach(addressOrName: string): Relay;
  deployed(): Promise<Relay>;

  on(event: EventFilter | string, listener: Listener): Relay;
  once(event: EventFilter | string, listener: Listener): Relay;
  addListener(eventName: EventFilter | string, listener: Listener): Relay;
  removeAllListeners(eventName: EventFilter | string): Relay;
  removeListener(eventName: any, listener: Listener): Relay;

  interface: RelayInterface;

  functions: {
    DIFFICULTY_ADJUSTMENT_INTERVAL(): Promise<BigNumber>;

    DIFF_TARGET(): Promise<BigNumber>;

    TARGET_TIMESPAN(): Promise<BigNumber>;

    TARGET_TIMESPAN_DIV_4(): Promise<BigNumber>;

    TARGET_TIMESPAN_MUL_4(): Promise<BigNumber>;

    UNROUNDED_MAX_TARGET(): Promise<BigNumber>;

    chains(arg0: BigNumberish): Promise<BigNumber>;

    epochStart(): Promise<string>;

    getBlockHeader(
      _digest: Arrayish
    ): Promise<{
      version: number;
      time: number;
      nonce: number;
      prevBlockHash: string;
      merkleRoot: string;
      target: BigNumber;
      height: BigNumber;
      0: number;
      1: number;
      2: number;
      3: string;
      4: string;
      5: BigNumber;
      6: BigNumber;
    }>;

    headers(
      arg0: Arrayish
    ): Promise<{
      header: string;
      height: BigNumber;
      chainWork: BigNumber;
      chainId: BigNumber;
      prevHash: string;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: string;
    }>;

    heaviestBlock(): Promise<string>;

    highScore(): Promise<BigNumber>;

    isCorrectDifficultyTarget(
      diffStartHeader: Arrayish,
      prevBlockHeader: Arrayish,
      currBlockHeader: Arrayish,
      _height: BigNumberish
    ): Promise<boolean>;

    submitBlockHeader(
      _header: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  DIFFICULTY_ADJUSTMENT_INTERVAL(): Promise<BigNumber>;

  DIFF_TARGET(): Promise<BigNumber>;

  TARGET_TIMESPAN(): Promise<BigNumber>;

  TARGET_TIMESPAN_DIV_4(): Promise<BigNumber>;

  TARGET_TIMESPAN_MUL_4(): Promise<BigNumber>;

  UNROUNDED_MAX_TARGET(): Promise<BigNumber>;

  chains(arg0: BigNumberish): Promise<BigNumber>;

  epochStart(): Promise<string>;

  getBlockHeader(
    _digest: Arrayish
  ): Promise<{
    version: number;
    time: number;
    nonce: number;
    prevBlockHash: string;
    merkleRoot: string;
    target: BigNumber;
    height: BigNumber;
    0: number;
    1: number;
    2: number;
    3: string;
    4: string;
    5: BigNumber;
    6: BigNumber;
  }>;

  headers(
    arg0: Arrayish
  ): Promise<{
    header: string;
    height: BigNumber;
    chainWork: BigNumber;
    chainId: BigNumber;
    prevHash: string;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: string;
  }>;

  heaviestBlock(): Promise<string>;

  highScore(): Promise<BigNumber>;

  isCorrectDifficultyTarget(
    diffStartHeader: Arrayish,
    prevBlockHeader: Arrayish,
    currBlockHeader: Arrayish,
    _height: BigNumberish
  ): Promise<boolean>;

  submitBlockHeader(
    _header: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    ChainReorg(
      _from: Arrayish | null,
      _to: Arrayish | null,
      _id: BigNumberish | null
    ): EventFilter;

    StoreHeader(
      _digest: Arrayish | null,
      _height: BigNumberish | null
    ): EventFilter;
  };

  estimate: {
    DIFFICULTY_ADJUSTMENT_INTERVAL(): Promise<BigNumber>;

    DIFF_TARGET(): Promise<BigNumber>;

    TARGET_TIMESPAN(): Promise<BigNumber>;

    TARGET_TIMESPAN_DIV_4(): Promise<BigNumber>;

    TARGET_TIMESPAN_MUL_4(): Promise<BigNumber>;

    UNROUNDED_MAX_TARGET(): Promise<BigNumber>;

    chains(arg0: BigNumberish): Promise<BigNumber>;

    epochStart(): Promise<BigNumber>;

    getBlockHeader(_digest: Arrayish): Promise<BigNumber>;

    headers(arg0: Arrayish): Promise<BigNumber>;

    heaviestBlock(): Promise<BigNumber>;

    highScore(): Promise<BigNumber>;

    isCorrectDifficultyTarget(
      diffStartHeader: Arrayish,
      prevBlockHeader: Arrayish,
      currBlockHeader: Arrayish,
      _height: BigNumberish
    ): Promise<BigNumber>;

    submitBlockHeader(_header: Arrayish): Promise<BigNumber>;
  };
}
