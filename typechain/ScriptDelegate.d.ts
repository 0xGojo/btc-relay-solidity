/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ScriptDelegateInterface extends Interface {
  functions: {
    isCLTV: TypedFunctionDescription<{ encode([_script]: [Arrayish]): string }>;

    isP2PKH: TypedFunctionDescription<{
      encode([_script]: [Arrayish]): string;
    }>;

    isP2SH: TypedFunctionDescription<{ encode([_script]: [Arrayish]): string }>;
  };

  events: {};
}

export class ScriptDelegate extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ScriptDelegate;
  attach(addressOrName: string): ScriptDelegate;
  deployed(): Promise<ScriptDelegate>;

  on(event: EventFilter | string, listener: Listener): ScriptDelegate;
  once(event: EventFilter | string, listener: Listener): ScriptDelegate;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ScriptDelegate;
  removeAllListeners(eventName: EventFilter | string): ScriptDelegate;
  removeListener(eventName: any, listener: Listener): ScriptDelegate;

  interface: ScriptDelegateInterface;

  functions: {
    isCLTV(
      _script: Arrayish
    ): Promise<{
      time: BigNumber;
      addr: string;
      0: BigNumber;
      1: string;
    }>;

    isP2PKH(_script: Arrayish): Promise<string>;

    isP2SH(_script: Arrayish): Promise<string>;
  };

  isCLTV(
    _script: Arrayish
  ): Promise<{
    time: BigNumber;
    addr: string;
    0: BigNumber;
    1: string;
  }>;

  isP2PKH(_script: Arrayish): Promise<string>;

  isP2SH(_script: Arrayish): Promise<string>;

  filters: {};

  estimate: {
    isCLTV(_script: Arrayish): Promise<BigNumber>;

    isP2PKH(_script: Arrayish): Promise<BigNumber>;

    isP2SH(_script: Arrayish): Promise<BigNumber>;
  };
}
