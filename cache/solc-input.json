{
  "language": "Solidity",
  "sources": {
    "contracts/Parser.sol": {
      "content": "pragma solidity ^0.5.15;\n\nimport {SafeMath} from \"@summa-tx/bitcoin-spv-sol/contracts/SafeMath.sol\";\nimport {BytesLib} from \"@summa-tx/bitcoin-spv-sol/contracts/BytesLib.sol\";\nimport {BTCUtils} from \"@summa-tx/bitcoin-spv-sol/contracts/BTCUtils.sol\";\n\nlibrary Parser {\n    using SafeMath for uint256;\n    using BytesLib for bytes;\n    using BTCUtils for bytes;\n\n    // EXCEPTION MESSAGES\n    string constant ERR_INVALID_OUTPUT = \"Invalid output\";\n\n    function extractInputLength(bytes memory _rawTx) internal pure returns (uint, uint) {\n        uint length = _rawTx.length;\n\n        // skip version\n        uint pos = 4;\n\n        bytes memory segwit = _rawTx.slice(pos, 2);\n        if (segwit[0] == 0x00 && segwit[1] == 0x01) {\n            pos = pos + 2;\n        }\n\n        uint varIntLen = _rawTx.slice(pos, length - pos).determineVarIntDataLength();\n        if (varIntLen == 0) {\n            varIntLen = 1;\n        }\n\n        uint numInputs = _rawTx.slice(pos, varIntLen).bytesToUint();\n        pos = pos + varIntLen;\n\n        for (uint i = 0; i < numInputs; i++) {\n            pos = pos + 32;\n            pos = pos + 4;\n            // read varInt for script sig\n            uint scriptSigvarIntLen = _rawTx.slice(pos, length - pos).determineVarIntDataLength();\n            if (scriptSigvarIntLen == 0) {\n                scriptSigvarIntLen = 1;\n            }\n            uint scriptSigLen = _rawTx.slice(pos, scriptSigvarIntLen).bytesToUint();\n            pos = pos + scriptSigvarIntLen;\n            // get script sig\n            pos = pos + scriptSigLen;\n            // get sequence 4 bytes\n            pos = pos + 4;\n            // new pos is now start of next index\n        }\n\n        return (numInputs, pos);\n    }\n\n    function extractOutputLength(bytes memory _rawTx) internal pure returns (uint, uint) {\n        uint length = _rawTx.length;\n        uint pos = 0;\n\n        uint varIntLen = _rawTx.slice(pos, length - pos).determineVarIntDataLength();\n        if (varIntLen == 0) {\n            varIntLen = 1;\n        }\n\n        uint numOutputs = _rawTx.slice(pos, varIntLen).bytesToUint();\n        pos = pos + varIntLen;\n\n        for (uint i = 0;  i < numOutputs; i++) {\n            pos = pos + 8;\n            uint pkScriptVarIntLen = _rawTx.slice(pos, length - pos).determineVarIntDataLength();\n            if (pkScriptVarIntLen == 0) {\n                pkScriptVarIntLen = 1;\n            }\n            uint pkScriptLen = _rawTx.slice(pos, pkScriptVarIntLen).bytesToUint();\n            pos = pos + pkScriptVarIntLen;\n            pos = pos + pkScriptLen;\n        }\n\n        return (numOutputs, pos);\n    }\n\n    function extractOutputAtIndex(bytes memory _outputs, uint256 _index) internal pure returns (bytes memory) {\n        uint length = _outputs.length;\n        uint pos = 0;\n\n        uint varIntLen = _outputs.slice(pos, length - pos).determineVarIntDataLength();\n        if (varIntLen == 0) {\n            varIntLen = 1;\n        }\n\n        uint numOutputs = _outputs.slice(pos, varIntLen).bytesToUint();\n        require(numOutputs >= _index, ERR_INVALID_OUTPUT);\n        pos = pos + varIntLen;\n\n        uint start = pos;\n        for (uint i = 0;  i < numOutputs; i++) {\n            pos = pos + 8;\n            uint pkScriptVarIntLen = _outputs.slice(pos, length - pos).determineVarIntDataLength();\n            if (pkScriptVarIntLen == 0) {\n                pkScriptVarIntLen = 1;\n            }\n            uint pkScriptLen = _outputs.slice(pos, pkScriptVarIntLen).bytesToUint();\n            pos = pos + pkScriptVarIntLen;\n            pos = pos + pkScriptLen;\n            if (i == _index) {\n                return _outputs.slice(start, pos);\n            }\n            start = pos;\n        }\n\n        return \"\";\n    }\n\n    function extractOutputValue(bytes memory _out) internal pure returns (uint64) {\n        return _out.extractValue();\n    }\n\n    function extractOutputScript(bytes memory _out) internal pure returns (bytes memory) {\n        uint length = _out.length;\n\n        // skip value\n        uint pos = 8;\n        uint pkScriptVarIntLen = _out.slice(pos, length - pos).determineVarIntDataLength();\n        if (pkScriptVarIntLen == 0) {\n            pkScriptVarIntLen = 1;\n        }\n\n        uint pkScriptLen = _out.slice(pos, pkScriptVarIntLen).bytesToUint();\n        pos = pos + pkScriptVarIntLen;\n        return _out.slice(pos, pkScriptLen);\n    }\n}"
    },
    "@summa-tx/bitcoin-spv-sol/contracts/SafeMath.sol": {
      "content": "pragma solidity ^0.5.10;\n\n/*\nThe MIT License (MIT)\n\nCopyright (c) 2016 Smart Contract Solutions, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n     * @dev Multiplies two numbers, throws on overflow.\n     */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n\n        c = _a * _b;\n        require(c / _a == _b, \"Overflow during multiplication.\");\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two numbers, truncating the quotient.\n     */\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        // assert(_b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n        return _a / _b;\n    }\n\n    /**\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b <= _a, \"Underflow during subtraction.\");\n        return _a - _b;\n    }\n\n    /**\n     * @dev Adds two numbers, throws on overflow.\n     */\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n        c = _a + _b;\n        require(c >= _a, \"Overflow during addition.\");\n        return c;\n    }\n}\n"
    },
    "@summa-tx/bitcoin-spv-sol/contracts/BytesLib.sol": {
      "content": "pragma solidity ^0.5.10;\n\n/*\n\nhttps://github.com/GNSPS/solidity-bytes-utils/\n\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <https://unlicense.org>\n*/\n\n\n/** @title BytesLib **/\n/** @author https://github.com/GNSPS **/\n\nlibrary BytesLib {\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\n        bytes memory tempBytes;\n\n        assembly {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n            // Store the length of the first bytes array at the beginning of\n            // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            // Maintain a memory counter for the current write location in the\n            // temp bytes array by adding the 32 bytes for the array length to\n            // the starting location.\n            let mc := add(tempBytes, 0x20)\n            // Stop copying when the memory counter reaches the length of the\n            // first bytes array.\n            let end := add(mc, length)\n\n            for {\n                // Initialize a copy counter to the start of the _preBytes data,\n                // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                // Write the _preBytes data into the tempBytes memory 32 bytes\n                // at a time.\n                mstore(mc, mload(cc))\n            }\n\n            // Add the length of _postBytes to the current length of tempBytes\n            // and store it as the new length in the first 32 bytes of the\n            // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            // Move the memory counter back from a multiple of 0x20 to the\n            // actual end of the _preBytes data.\n            mc := end\n            // Stop copying when the memory counter reaches the new combined\n            // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            // Update the free-memory pointer by padding our last write location\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n            // next 32 byte block, then round down to the nearest multiple of\n            // 32. If the sum of the length of the two arrays is zero then add\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(0x40, and(\n                add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n                not(31) // Round down to the nearest 32 bytes.\n            ))\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n        assembly {\n            // Read the first 32 bytes of _preBytes storage, which is the length\n            // of the array. (We don't need to use the offset into the slot\n            // because arrays use the entire slot.)\n            let fslot := sload(_preBytes_slot)\n            // Arrays of 31 bytes or less have an even value in their slot,\n            // while longer arrays have an odd value. The actual length is\n            // the slot divided by two for odd values, and the lowest order\n            // byte divided by two for even values.\n            // If the slot is even, bitwise and the slot with 255 and divide by\n            // two to get the length. If the slot is odd, bitwise and the slot\n            // with -1 and divide by two.\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n                // Since the new array still fits in the slot, we just need to\n                // update the contents of the slot.\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                    _preBytes_slot,\n                    // all the modifications to the slot are inside this\n                    // next block\n                    add(\n                        // we can just add to the slot contents because the\n                        // bytes we want to change are the LSBs\n                        fslot,\n                        add(\n                            mul(\n                                div(\n                                    // load the bytes from memory\n                                    mload(add(_postBytes, 0x20)),\n                                    // zero all bytes to the right\n                                    exp(0x100, sub(32, mlength))\n                        ),\n                        // and now shift left the number of bytes to\n                        // leave space for the length in the slot\n                        exp(0x100, sub(32, newlength))\n                        ),\n                        // increase length by the double of the memory\n                        // bytes length\n                        mul(mlength, 2)\n                        )\n                    )\n                )\n            }\n            case 1 {\n                // The stored value fits in the slot, but the combined value\n                // will exceed it.\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes_slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes_slot, add(mul(newlength, 2), 1))\n\n                // The contents of the _postBytes array start 32 bytes into\n                // the structure. Our first read should obtain the `submod`\n                // bytes that can fit into the unused space in the last word\n                // of the stored array. To get this, we read 32 bytes starting\n                // from `submod`, so the data we read overlaps with the array\n                // contents by `submod` bytes. Masking the lowest-order\n                // `submod` bytes allows us to add that value directly to the\n                // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                    sc,\n                    add(\n                        and(\n                            fslot,\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                    ),\n                    and(mload(mc), mask)\n                    )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes_slot)\n                // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes_slot, add(mul(newlength, 2), 1))\n\n                // Copy over the first `submod` bytes of the new data as in\n                // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(bytes memory _bytes, uint _start, uint _length) internal  pure returns (bytes memory res) {\n        if (_length == 0) {\n            return hex\"\";\n        }\n        uint _end = _start + _length;\n        require(_end > _start && _bytes.length >= _end, \"Slice out of bounds\");\n\n        assembly {\n            // Alloc bytes array with additional 32 bytes afterspace and assign it's size\n            res := mload(0x40)\n            mstore(0x40, add(add(res, 64), _length))\n            mstore(res, _length)\n\n            // Compute distance between source and destination pointers\n            let diff := sub(res, add(_bytes, _start))\n\n            for {\n                let src := add(add(_bytes, 32), _start)\n                let end := add(src, _length)\n            } lt(src, end) {\n                src := add(src, 32)\n            } {\n                mstore(add(src, diff), mload(src))\n            }\n        }\n    }\n\n    function toAddress(bytes memory _bytes, uint _start) internal  pure returns (address) {\n        uint _totalLen = _start + 20;\n        require(_totalLen > _start && _bytes.length >= _totalLen, \"Address conversion out of bounds.\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint(bytes memory _bytes, uint _start) internal  pure returns (uint256) {\n        uint _totalLen = _start + 32;\n        require(_totalLen > _start && _bytes.length >= _totalLen, \"Uint conversion out of bounds.\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                    // the next line is the loop condition:\n                    // while(uint(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\n        bool success = true;\n\n        assembly {\n            // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes_slot)\n            // Decode the length of the stored array like in concatStorage().\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n                // slength can contain both the length and contents of the array\n                // if length < 32 bytes so let's prepare for that\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                        // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                            // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                        // cb is a circuit breaker in the for loop since there's\n                        //  no said feature for inline assembly loops\n                        // cb = 1 - don't breaker\n                        // cb = 0 - break\n                        let cb := 1\n\n                        // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes_slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                        // the next line is the loop condition:\n                        // while(uint(mc < end) + cb == 2)\n                        for {} eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                                // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function toBytes32(bytes memory _source) pure internal returns (bytes32 result) {\n        if (_source.length == 0) {\n            return 0x0;\n        }\n\n        assembly {\n            result := mload(add(_source, 32))\n        }\n    }\n\n    function keccak256Slice(bytes memory _bytes, uint _start, uint _length) pure internal returns (bytes32 result) {\n        uint _end = _start + _length;\n        require(_end > _start && _bytes.length >= _end, \"Slice out of bounds\");\n\n        assembly {\n            result := keccak256(add(add(_bytes, 32), _start), _length)\n        }\n    }\n}\n"
    },
    "@summa-tx/bitcoin-spv-sol/contracts/BTCUtils.sol": {
      "content": "pragma solidity ^0.5.10;\n\n/** @title BitcoinSPV */\n/** @author Summa (https://summa.one) */\n\nimport {BytesLib} from \"./BytesLib.sol\";\nimport {SafeMath} from \"./SafeMath.sol\";\n\nlibrary BTCUtils {\n    using BytesLib for bytes;\n    using SafeMath for uint256;\n\n    // The target at minimum Difficulty. Also the target of the genesis block\n    uint256 public constant DIFF1_TARGET = 0xffff0000000000000000000000000000000000000000000000000000;\n\n    uint256 public constant RETARGET_PERIOD = 2 * 7 * 24 * 60 * 60;  // 2 weeks in seconds\n    uint256 public constant RETARGET_PERIOD_BLOCKS = 2016;  // 2 weeks in blocks\n\n    uint256 public constant ERR_BAD_ARG = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n\n    /* ***** */\n    /* UTILS */\n    /* ***** */\n\n    /// @notice         Determines the length of a VarInt in bytes\n    /// @dev            A VarInt of >1 byte is prefixed with a flag indicating its length\n    /// @param _flag    The first byte of a VarInt\n    /// @return         The number of non-flag bytes in the VarInt\n    function determineVarIntDataLength(bytes memory _flag) internal pure returns (uint8) {\n        if (uint8(_flag[0]) == 0xff) {\n            return 8;  // one-byte flag, 8 bytes data\n        }\n        if (uint8(_flag[0]) == 0xfe) {\n            return 4;  // one-byte flag, 4 bytes data\n        }\n        if (uint8(_flag[0]) == 0xfd) {\n            return 2;  // one-byte flag, 2 bytes data\n        }\n\n        return 0;  // flag is data\n    }\n\n    /// @notice     Parse a VarInt into its data length and the number it represents\n    /// @dev        Useful for Parsing Vins and Vouts. Returns ERR_BAD_ARG if insufficient bytes.\n    ///             Caller SHOULD explicitly handle this case (or bubble it up)\n    /// @param _b   A byte-string starting with a VarInt\n    /// @return     number of bytes in the encoding (not counting the tag), the encoded int\n    function parseVarInt(bytes memory _b) internal pure returns (uint256, uint256) {\n      uint8 _dataLen = determineVarIntDataLength(_b);\n\n      if (_dataLen == 0) {\n        return (0, uint8(_b[0]));\n      }\n      if (_b.length < 1 + _dataLen) {\n          return (ERR_BAD_ARG, 0);\n      }\n      uint256 _number = bytesToUint(reverseEndianness(_b.slice(1, _dataLen)));\n      return (_dataLen, _number);\n    }\n\n    /// @notice          Changes the endianness of a byte array\n    /// @dev             Returns a new, backwards, bytes\n    /// @param _b        The bytes to reverse\n    /// @return          The reversed bytes\n    function reverseEndianness(bytes memory _b) internal pure returns (bytes memory) {\n        bytes memory _newValue = new bytes(_b.length);\n\n        for (uint i = 0; i < _b.length; i++) {\n            _newValue[_b.length - i - 1] = _b[i];\n        }\n\n        return _newValue;\n    }\n\n    /// @notice          Changes the endianness of a uint256\n    /// @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n    /// @param _b        The unsigned integer to reverse\n    /// @return          The reversed value\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v = ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\n        // swap 2-byte long pairs\n        v = ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\n        // swap 4-byte long pairs\n        v = ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\n        // swap 8-byte long pairs\n        v = ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\n        // swap 16-byte long pairs\n        v = (v >> 128) | (v << 128);\n    }\n\n    /// @notice          Converts big-endian bytes to a uint\n    /// @dev             Traverses the byte array and sums the bytes\n    /// @param _b        The big-endian bytes-encoded integer\n    /// @return          The integer representation\n    function bytesToUint(bytes memory _b) internal pure returns (uint256) {\n        uint256 _number;\n\n        for (uint i = 0; i < _b.length; i++) {\n            _number = _number + uint8(_b[i]) * (2 ** (8 * (_b.length - (i + 1))));\n        }\n\n        return _number;\n    }\n\n    /// @notice          Get the last _num bytes from a byte array\n    /// @param _b        The byte array to slice\n    /// @param _num      The number of bytes to extract from the end\n    /// @return          The last _num bytes of _b\n    function lastBytes(bytes memory _b, uint256 _num) internal pure returns (bytes memory) {\n        uint256 _start = _b.length.sub(_num);\n\n        return _b.slice(_start, _num);\n    }\n\n    /// @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n    /// @dev             abi.encodePacked changes the return to bytes instead of bytes32\n    /// @param _b        The pre-image\n    /// @return          The digest\n    function hash160(bytes memory _b) internal pure returns (bytes memory) {\n        return abi.encodePacked(ripemd160(abi.encodePacked(sha256(_b))));\n    }\n\n    /// @notice          Implements bitcoin's hash256 (double sha2)\n    /// @dev             abi.encodePacked changes the return to bytes instead of bytes32\n    /// @param _b        The pre-image\n    /// @return          The digest\n    function hash256(bytes memory _b) internal pure returns (bytes32) {\n        return sha256(abi.encodePacked(sha256(_b)));\n    }\n\n    /// @notice          Implements bitcoin's hash256 (double sha2)\n    /// @dev             sha2 is precompiled smart contract located at address(2)\n    /// @param _b        The pre-image\n    /// @return          The digest\n    function hash256View(bytes memory _b) internal view returns (bytes32 res) {\n        assembly {\n            let ptr := mload(0x40)\n            pop(staticcall(gas, 2, add(_b, 32), mload(_b), ptr, 32))\n            pop(staticcall(gas, 2, ptr, 32, ptr, 32))\n            res := mload(ptr)\n        }\n    }\n\n    /* ************ */\n    /* Legacy Input */\n    /* ************ */\n\n    /// @notice          Extracts the nth input from the vin (0-indexed)\n    /// @dev             Iterates over the vin. If you need to extract several, write a custom function\n    /// @param _vin      The vin as a tightly-packed byte array\n    /// @param _index    The 0-indexed location of the input to extract\n    /// @return          The input as a byte array\n    function extractInputAtIndex(bytes memory _vin, uint256 _index) internal pure returns (bytes memory) {\n        uint256 _varIntDataLen;\n        uint256 _nIns;\n\n        (_varIntDataLen, _nIns) = parseVarInt(_vin);\n        require(_varIntDataLen != ERR_BAD_ARG, \"Read overrun during VarInt parsing\");\n        require(_index <= _nIns, \"Vin read overrun\");\n\n        bytes memory _remaining;\n\n        uint256 _len = 0;\n        uint256 _offset = 1 + _varIntDataLen;\n\n        for (uint256 _i = 0; _i < _index; _i ++) {\n            _remaining = _vin.slice(_offset, _vin.length - _offset);\n            _len = determineInputLength(_remaining);\n            require(_len != ERR_BAD_ARG, \"Bad VarInt in scriptSig\");\n            _offset = _offset + _len;\n        }\n\n        _remaining = _vin.slice(_offset, _vin.length - _offset);\n        _len = determineInputLength(_remaining);\n        require(_len != ERR_BAD_ARG, \"Bad VarInt in scriptSig\");\n        return _vin.slice(_offset, _len);\n    }\n\n    /// @notice          Determines whether an input is legacy\n    /// @dev             False if no scriptSig, otherwise True\n    /// @param _input    The input\n    /// @return          True for legacy, False for witness\n    function isLegacyInput(bytes memory _input) internal pure returns (bool) {\n        return _input.keccak256Slice(36, 1) != keccak256(hex\"00\");\n    }\n\n    /// @notice          Determines the length of a scriptSig in an input\n    /// @dev             Will return 0 if passed a witness input.\n    /// @param _input    The LEGACY input\n    /// @return          The length of the script sig\n    function extractScriptSigLen(bytes memory _input) internal pure returns (uint256, uint256) {\n        if (_input.length < 37) {\n          return (ERR_BAD_ARG, 0);\n        }\n        bytes memory _afterOutpoint = _input.slice(36, _input.length - 36);\n\n        uint256 _varIntDataLen;\n        uint256 _scriptSigLen;\n        (_varIntDataLen, _scriptSigLen) = parseVarInt(_afterOutpoint);\n\n        return (_varIntDataLen, _scriptSigLen);\n    }\n\n    /// @notice          Determines the length of an input from its scriptsig\n    /// @dev             36 for outpoint, 1 for scriptsig length, 4 for sequence\n    /// @param _input    The input\n    /// @return          The length of the input in bytes\n    function determineInputLength(bytes memory _input) internal pure returns (uint256) {\n        uint256 _varIntDataLen;\n        uint256 _scriptSigLen;\n        (_varIntDataLen, _scriptSigLen) = extractScriptSigLen(_input);\n        if (_varIntDataLen == ERR_BAD_ARG) {\n          return ERR_BAD_ARG;\n        }\n\n        return 36 + 1 + _varIntDataLen + _scriptSigLen + 4;\n    }\n\n    /// @notice          Extracts the LE sequence bytes from an input\n    /// @dev             Sequence is used for relative time locks\n    /// @param _input    The LEGACY input\n    /// @return          The sequence bytes (LE uint)\n    function extractSequenceLELegacy(bytes memory _input) internal pure returns (bytes memory) {\n        uint256 _varIntDataLen;\n        uint256 _scriptSigLen;\n        (_varIntDataLen, _scriptSigLen) = extractScriptSigLen(_input);\n        require(_varIntDataLen != ERR_BAD_ARG, \"Bad VarInt in scriptSig\");\n        return _input.slice(36 + 1 + _varIntDataLen + _scriptSigLen, 4);\n    }\n\n    /// @notice          Extracts the sequence from the input\n    /// @dev             Sequence is a 4-byte little-endian number\n    /// @param _input    The LEGACY input\n    /// @return          The sequence number (big-endian uint)\n    function extractSequenceLegacy(bytes memory _input) internal pure returns (uint32) {\n        bytes memory _leSeqence = extractSequenceLELegacy(_input);\n        bytes memory _beSequence = reverseEndianness(_leSeqence);\n        return uint32(bytesToUint(_beSequence));\n    }\n    /// @notice          Extracts the VarInt-prepended scriptSig from the input in a tx\n    /// @dev             Will return hex\"00\" if passed a witness input\n    /// @param _input    The LEGACY input\n    /// @return          The length-prepended script sig\n    function extractScriptSig(bytes memory _input) internal pure returns (bytes memory) {\n        uint256 _varIntDataLen;\n        uint256 _scriptSigLen;\n        (_varIntDataLen, _scriptSigLen) = extractScriptSigLen(_input);\n        require(_varIntDataLen != ERR_BAD_ARG, \"Bad VarInt in scriptSig\");\n        return _input.slice(36, 1 + _varIntDataLen + _scriptSigLen);\n    }\n\n\n    /* ************* */\n    /* Witness Input */\n    /* ************* */\n\n    /// @notice          Extracts the LE sequence bytes from an input\n    /// @dev             Sequence is used for relative time locks\n    /// @param _input    The WITNESS input\n    /// @return          The sequence bytes (LE uint)\n    function extractSequenceLEWitness(bytes memory _input) internal pure returns (bytes memory) {\n        return _input.slice(37, 4);\n    }\n\n    /// @notice          Extracts the sequence from the input in a tx\n    /// @dev             Sequence is a 4-byte little-endian number\n    /// @param _input    The WITNESS input\n    /// @return          The sequence number (big-endian uint)\n    function extractSequenceWitness(bytes memory _input) internal pure returns (uint32) {\n        bytes memory _leSeqence = extractSequenceLEWitness(_input);\n        bytes memory _inputeSequence = reverseEndianness(_leSeqence);\n        return uint32(bytesToUint(_inputeSequence));\n    }\n\n    /// @notice          Extracts the outpoint from the input in a tx\n    /// @dev             32 byte tx id with 4 byte index\n    /// @param _input    The input\n    /// @return          The outpoint (LE bytes of prev tx hash + LE bytes of prev tx index)\n    function extractOutpoint(bytes memory _input) internal pure returns (bytes memory) {\n        return _input.slice(0, 36);\n    }\n\n    /// @notice          Extracts the outpoint tx id from an input\n    /// @dev             32 byte tx id\n    /// @param _input    The input\n    /// @return          The tx id (little-endian bytes)\n    function extractInputTxIdLE(bytes memory _input) internal pure returns (bytes32) {\n        return _input.slice(0, 32).toBytes32();\n    }\n\n    /// @notice          Extracts the LE tx input index from the input in a tx\n    /// @dev             4 byte tx index\n    /// @param _input    The input\n    /// @return          The tx index (little-endian bytes)\n    function extractTxIndexLE(bytes memory _input) internal pure returns (bytes memory) {\n        return _input.slice(32, 4);\n    }\n\n    /* ****** */\n    /* Output */\n    /* ****** */\n\n    /// @notice          Determines the length of an output\n    /// @dev             5 types: WPKH, WSH, PKH, SH, and OP_RETURN\n    /// @param _output   The output\n    /// @return          The length indicated by the prefix, error if invalid length\n    function determineOutputLength(bytes memory _output) internal pure returns (uint256) {\n        if (_output.length < 9) {\n          return ERR_BAD_ARG;\n        }\n        bytes memory _afterValue = _output.slice(8, _output.length - 8);\n\n        uint256 _varIntDataLen;\n        uint256 _scriptPubkeyLength;\n        (_varIntDataLen, _scriptPubkeyLength) = parseVarInt(_afterValue);\n\n        if (_varIntDataLen == ERR_BAD_ARG) {\n          return ERR_BAD_ARG;\n        }\n\n        // 8 byte value, 1 byte for tag itself\n        return 8 + 1 + _varIntDataLen + _scriptPubkeyLength;\n    }\n\n    /// @notice          Extracts the output at a given index in the TxIns vector\n    /// @dev             Iterates over the vout. If you need to extract multiple, write a custom function\n    /// @param _vout     The _vout to extract from\n    /// @param _index    The 0-indexed location of the output to extract\n    /// @return          The specified output\n    function extractOutputAtIndex(bytes memory _vout, uint256 _index) internal pure returns (bytes memory) {\n        uint256 _varIntDataLen;\n        uint256 _nOuts;\n\n        (_varIntDataLen, _nOuts) = parseVarInt(_vout);\n        require(_varIntDataLen != ERR_BAD_ARG, \"Read overrun during VarInt parsing\");\n        require(_index <= _nOuts, \"Vout read overrun\");\n\n        bytes memory _remaining;\n\n        uint256 _len = 0;\n        uint256 _offset = 1 + _varIntDataLen;\n\n        for (uint256 _i = 0; _i < _index; _i ++) {\n            _remaining = _vout.slice(_offset, _vout.length - _offset);\n            _len = determineOutputLength(_remaining);\n            require(_len != ERR_BAD_ARG, \"Bad VarInt in scriptPubkey\");\n            _offset += _len;\n        }\n\n        _remaining = _vout.slice(_offset, _vout.length - _offset);\n        _len = determineOutputLength(_remaining);\n        require(_len != ERR_BAD_ARG, \"Bad VarInt in scriptPubkey\");\n\n        return _vout.slice(_offset, _len);\n    }\n\n    /// @notice          Extracts the output script length\n    /// @dev             Indexes the length prefix on the pk_script\n    /// @param _output   The output\n    /// @return          The 1 byte length prefix\n    function extractOutputScriptLen(bytes memory _output) internal pure returns (bytes memory) {\n        return _output.slice(8, 1);\n    }\n\n    /// @notice          Extracts the value bytes from the output in a tx\n    /// @dev             Value is an 8-byte little-endian number\n    /// @param _output   The output\n    /// @return          The output value as LE bytes\n    function extractValueLE(bytes memory _output) internal pure returns (bytes memory) {\n        return _output.slice(0, 8);\n    }\n\n    /// @notice          Extracts the value from the output in a tx\n    /// @dev             Value is an 8-byte little-endian number\n    /// @param _output   The output\n    /// @return          The output value\n    function extractValue(bytes memory _output) internal pure returns (uint64) {\n        bytes memory _leValue = extractValueLE(_output);\n        bytes memory _beValue = reverseEndianness(_leValue);\n        return uint64(bytesToUint(_beValue));\n    }\n\n    /// @notice          Extracts the data from an op return output\n    /// @dev             Returns hex\"\" if no data or not an op return\n    /// @param _output   The output\n    /// @return          Any data contained in the opreturn output, null if not an op return\n    function extractOpReturnData(bytes memory _output) internal pure returns (bytes memory) {\n        if (_output.keccak256Slice(9, 1) != keccak256(hex\"6a\")) {\n            return hex\"\";\n        }\n        bytes memory _dataLen = _output.slice(10, 1);\n        return _output.slice(11, bytesToUint(_dataLen));\n    }\n\n    /// @notice          Extracts the hash from the output script\n    /// @dev             Determines type by the length prefix and validates format\n    /// @param _output   The output\n    /// @return          The hash committed to by the pk_script, or null for errors\n    function extractHash(bytes memory _output) internal pure returns (bytes memory) {\n        if (uint8(_output.slice(9, 1)[0]) == 0) {\n            uint256 _len = uint8(extractOutputScriptLen(_output)[0]);\n            if (_len < 2) {\n              return hex\"\";\n            }\n            _len -= 2;\n            // Check for maliciously formatted witness outputs\n            if (uint8(_output.slice(10, 1)[0]) != uint8(_len)) {\n                return hex\"\";\n            }\n            return _output.slice(11, _len);\n        } else {\n            bytes32 _tag = _output.keccak256Slice(8, 3);\n            // p2pkh\n            if (_tag == keccak256(hex\"1976a9\")) {\n                // Check for maliciously formatted p2pkh\n                if (uint8(_output.slice(11, 1)[0]) != 0x14 ||\n                    _output.keccak256Slice(_output.length - 2, 2) != keccak256(hex\"88ac\")) {\n                    return hex\"\";\n                }\n                return _output.slice(12, 20);\n            //p2sh\n            } else if (_tag == keccak256(hex\"17a914\")) {\n                // Check for maliciously formatted p2sh\n                if (uint8(_output.slice(_output.length - 1, 1)[0]) != 0x87) {\n                    return hex\"\";\n                }\n                return _output.slice(11, 20);\n            }\n        }\n        return hex\"\";  /* NB: will trigger on OPRETURN and non-standard that don't overrun */\n    }\n\n    /* ********** */\n    /* Witness TX */\n    /* ********** */\n\n\n    /// @notice      Checks that the vin passed up is properly formatted\n    /// @dev         Consider a vin with a valid vout in its scriptsig\n    /// @param _vin  Raw bytes length-prefixed input vector\n    /// @return      True if it represents a validly formatted vin\n    function validateVin(bytes memory _vin) internal pure returns (bool) {\n        uint256 _varIntDataLen;\n        uint256 _nIns;\n\n        (_varIntDataLen, _nIns) = parseVarInt(_vin);\n\n        // Not valid if it says there are too many or no inputs\n        if (_nIns == 0 || _varIntDataLen == ERR_BAD_ARG) {\n            return false;\n        }\n\n        uint256 _offset = 1 + _varIntDataLen;\n\n        for (uint256 i = 0; i < _nIns; i++) {\n            // If we're at the end, but still expect more\n            if (_offset >= _vin.length) {\n              return false;\n            }\n\n            // Grab the next input and determine its length.\n            bytes memory _next = _vin.slice(_offset, _vin.length - _offset);\n            uint256 _nextLen = determineInputLength(_next);\n            if (_nextLen == ERR_BAD_ARG) {\n              return false;\n            }\n\n            // Increase the offset by that much\n            _offset += _nextLen;\n        }\n\n        // Returns false if we're not exactly at the end\n        return _offset == _vin.length;\n    }\n\n    /// @notice      Checks that the vin passed up is properly formatted\n    /// @dev         Consider a vin with a valid vout in its scriptsig\n    /// @param _vout Raw bytes length-prefixed output vector\n    /// @return      True if it represents a validly formatted bout\n    function validateVout(bytes memory _vout) internal pure returns (bool) {\n        uint256 _varIntDataLen;\n        uint256 _nOuts;\n\n        (_varIntDataLen, _nOuts) = parseVarInt(_vout);\n\n        // Not valid if it says there are too many or no inputs\n        if (_nOuts == 0 || _varIntDataLen == ERR_BAD_ARG) {\n            return false;\n        }\n\n        uint256 _offset = 1 + _varIntDataLen;\n\n        for (uint256 i = 0; i < _nOuts; i++) {\n            // If we're at the end, but still expect more\n            if (_offset >= _vout.length) {\n              return false;\n            }\n\n            // Grab the next output and determine its length.\n            // Increase the offset by that much\n            bytes memory _next = _vout.slice(_offset, _vout.length - _offset);\n            uint256 _nextLen = determineOutputLength(_next);\n            if (_nextLen == ERR_BAD_ARG) {\n              return false;\n            }\n\n            _offset += _nextLen;\n        }\n\n        // Returns false if we're not exactly at the end\n        return _offset == _vout.length;\n    }\n\n\n\n    /* ************ */\n    /* Block Header */\n    /* ************ */\n\n    /// @notice          Extracts the transaction merkle root from a block header\n    /// @dev             Use verifyHash256Merkle to verify proofs with this root\n    /// @param _header   The header\n    /// @return          The merkle root (little-endian)\n    function extractMerkleRootLE(bytes memory _header) internal pure returns (bytes memory) {\n        return _header.slice(36, 32);\n    }\n\n    /// @notice          Extracts the target from a block header\n    /// @dev             Target is a 256 bit number encoded as a 3-byte mantissa and 1 byte exponent\n    /// @param _header   The header\n    /// @return          The target threshold\n    function extractTarget(bytes memory _header) internal pure returns (uint256) {\n        bytes memory _m = _header.slice(72, 3);\n        uint8 _e = uint8(_header[75]);\n        uint256 _mantissa = bytesToUint(reverseEndianness(_m));\n        uint _exponent = _e - 3;\n\n        return _mantissa * (256 ** _exponent);\n    }\n\n    /// @notice          Calculate difficulty from the difficulty 1 target and current target\n    /// @dev             Difficulty 1 is 0x1d00ffff on mainnet and testnet\n    /// @dev             Difficulty 1 is a 256 bit number encoded as a 3-byte mantissa and 1 byte exponent\n    /// @param _target   The current target\n    /// @return          The block difficulty (bdiff)\n    function calculateDifficulty(uint256 _target) internal pure returns (uint256) {\n        // Difficulty 1 calculated from 0x1d00ffff\n        return DIFF1_TARGET.div(_target);\n    }\n\n    /// @notice          Extracts the previous block's hash from a block header\n    /// @dev             Block headers do NOT include block number :(\n    /// @param _header   The header\n    /// @return          The previous block's hash (little-endian)\n    function extractPrevBlockLE(bytes memory _header) internal pure returns (bytes memory) {\n        return _header.slice(4, 32);\n    }\n\n    /// @notice          Extracts the timestamp from a block header\n    /// @dev             Time is not 100% reliable\n    /// @param _header   The header\n    /// @return          The timestamp (little-endian bytes)\n    function extractTimestampLE(bytes memory _header) internal pure returns (bytes memory) {\n        return _header.slice(68, 4);\n    }\n\n    /// @notice          Extracts the timestamp from a block header\n    /// @dev             Time is not 100% reliable\n    /// @param _header   The header\n    /// @return          The timestamp (uint)\n    function extractTimestamp(bytes memory _header) internal pure returns (uint32) {\n        return uint32(bytesToUint(reverseEndianness(extractTimestampLE(_header))));\n    }\n\n    /// @notice          Extracts the expected difficulty from a block header\n    /// @dev             Does NOT verify the work\n    /// @param _header   The header\n    /// @return          The difficulty as an integer\n    function extractDifficulty(bytes memory _header) internal pure returns (uint256) {\n        return calculateDifficulty(extractTarget(_header));\n    }\n\n    /// @notice          Concatenates and hashes two inputs for merkle proving\n    /// @param _a        The first hash\n    /// @param _b        The second hash\n    /// @return          The double-sha256 of the concatenated hashes\n    function _hash256MerkleStep(bytes memory _a, bytes memory _b) internal pure returns (bytes32) {\n        return hash256(abi.encodePacked(_a, _b));\n    }\n\n    /// @notice          Verifies a Bitcoin-style merkle tree\n    /// @dev             Leaves are 0-indexed.\n    /// @param _proof    The proof. Tightly packed LE sha256 hashes. The last hash is the root\n    /// @param _index    The index of the leaf\n    /// @return          true if the proof is valid, else false\n    function verifyHash256Merkle(bytes memory _proof, uint _index) internal pure returns (bool) {\n        // Not an even number of hashes\n        if (_proof.length % 32 != 0) {\n            return false;\n        }\n\n        // Special case for coinbase-only blocks\n        if (_proof.length == 32) {\n            return true;\n        }\n\n        // Should never occur\n        if (_proof.length == 64) {\n            return false;\n        }\n\n        uint _idx = _index;\n        bytes32 _root = _proof.slice(_proof.length - 32, 32).toBytes32();\n        bytes32 _current = _proof.slice(0, 32).toBytes32();\n\n        for (uint i = 1; i < (_proof.length.div(32)) - 1; i++) {\n            if (_idx % 2 == 1) {\n                _current = _hash256MerkleStep(_proof.slice(i * 32, 32), abi.encodePacked(_current));\n            } else {\n                _current = _hash256MerkleStep(abi.encodePacked(_current), _proof.slice(i * 32, 32));\n            }\n            _idx = _idx >> 1;\n        }\n        return _current == _root;\n    }\n\n    /*\n    NB: https://github.com/bitcoin/bitcoin/blob/78dae8caccd82cfbfd76557f1fb7d7557c7b5edb/src/pow.cpp#L49-L72\n    NB: We get a full-bitlength target from this. For comparison with\n        header-encoded targets we need to mask it with the header target\n        e.g. (full & truncated) == truncated\n    */\n    /// @notice                 performs the bitcoin difficulty retarget\n    /// @dev                    implements the Bitcoin algorithm precisely\n    /// @param _previousTarget  the target of the previous period\n    /// @param _firstTimestamp  the timestamp of the first block in the difficulty period\n    /// @param _secondTimestamp the timestamp of the last block in the difficulty period\n    /// @return                 the new period's target threshold\n    function retargetAlgorithm(\n        uint256 _previousTarget,\n        uint256 _firstTimestamp,\n        uint256 _secondTimestamp\n    ) internal pure returns (uint256) {\n        uint256 _elapsedTime = _secondTimestamp.sub(_firstTimestamp);\n\n        // Normalize ratio to factor of 4 if very long or very short\n        if (_elapsedTime < RETARGET_PERIOD.div(4)) {\n            _elapsedTime = RETARGET_PERIOD.div(4);\n        }\n        if (_elapsedTime > RETARGET_PERIOD.mul(4)) {\n            _elapsedTime = RETARGET_PERIOD.mul(4);\n        }\n\n        /*\n          NB: high targets e.g. ffff0020 can cause overflows here\n              so we divide it by 256**2, then multiply by 256**2 later\n              we know the target is evenly divisible by 256**2, so this isn't an issue\n        */\n\n        uint256 _adjusted = _previousTarget.div(65536).mul(_elapsedTime);\n        return _adjusted.div(RETARGET_PERIOD).mul(65536);\n    }\n}\n"
    },
    "contracts/ParserDelegate.sol": {
      "content": "pragma solidity ^0.5.15;\n\nimport {BytesLib} from \"@summa-tx/bitcoin-spv-sol/contracts/BytesLib.sol\";\n\nimport {Parser} from \"./Parser.sol\";\n\ncontract ParserDelegate {\n    using BytesLib for bytes;\n    using Parser for bytes;\n\n    function extractInputLength(bytes memory _rawTx) public pure returns (uint numInputs, uint lenInputs) {\n        return _rawTx.extractInputLength();\n    }\n\n    function extractOutputLength(bytes memory _rawTx) public pure returns (uint numOutputs, uint lenOutputs) {\n        return _rawTx.extractOutputLength();\n    }\n\n    function extractOutputAtIndex(bytes memory _rawTx, uint256 _index) public pure returns (bytes memory) {\n        (, uint lenInputs) = _rawTx.extractInputLength();\n        return _rawTx.slice(lenInputs, _rawTx.length - lenInputs).extractOutputAtIndex(_index);\n    }\n\n    function extractOutputValueAtIndex(bytes memory _rawTx, uint256 _index) public pure returns (uint256) {\n        bytes memory output = extractOutputAtIndex(_rawTx, _index);\n        return output.extractOutputValue();\n    }\n\n    function extractOutputScriptAtIndex(bytes memory _rawTx, uint256 _index) public pure returns (bytes memory) {\n        bytes memory output = extractOutputAtIndex(_rawTx, _index);\n        return output.extractOutputScript();\n    }\n}"
    },
    "contracts/Relay.sol": {
      "content": "pragma solidity ^0.5.15;\n\nimport {SafeMath} from \"@summa-tx/bitcoin-spv-sol/contracts/SafeMath.sol\";\nimport {BytesLib} from \"@summa-tx/bitcoin-spv-sol/contracts/BytesLib.sol\";\nimport {BTCUtils} from \"@summa-tx/bitcoin-spv-sol/contracts/BTCUtils.sol\";\nimport {ValidateSPV} from \"@summa-tx/bitcoin-spv-sol/contracts/ValidateSPV.sol\";\n\n/// @title BTC Relay\ncontract Relay {\n    using SafeMath for uint256;\n    using BytesLib for bytes;\n    using BTCUtils for bytes;\n    using ValidateSPV for bytes;\n\n    // TODO: optimize storage costs\n    struct Header {\n        bytes32 merkle; // merkle tree root\n        uint256 height; // height of this block header\n        uint256 target; // block target\n        uint256 timestamp; // block timestamp\n        uint256 chainWork; // accumulated PoW at this height\n        uint256 chainId; // identifier of chain fork\n    }\n\n    // mapping of block hashes to block headers (ALL ever submitted, i.e., incl. forks)\n    mapping(bytes32 => Header) public headers;\n\n    // main chain mapping for constant time inclusion check\n    mapping(uint256 => bytes32) public chain;\n\n    struct Fork {\n        uint256 height; // best height of fork\n        bytes32 ancestor; // branched from this\n        bytes32[] descendants; // references to submitted block headers\n    }\n\n    // mapping of ids to forks\n    mapping(uint256 => Fork) public forks;\n\n    // block with the most accumulated work, i.e., blockchain tip\n    bytes32 public bestBlock;\n    uint256 public bestScore;\n    uint256 public bestHeight;\n\n    // incrementing counter to track forks\n    // OPTIMIZATION: default to zero value\n    uint256 private chainCounter;\n\n    // header of the block at the start of the difficulty period\n    uint256 public epochStartTarget;\n    uint256 public epochStartTime;\n\n    // CONSTANTS\n    /*\n    * Bitcoin difficulty constants\n    */\n    uint256 public constant DIFFICULTY_ADJUSTMENT_INTERVAL = 2016;\n    uint256 public constant DIFF_TARGET = 0xffff0000000000000000000000000000000000000000000000000000;\n\n    uint256 public constant MAIN_CHAIN_ID = 0;\n    uint256 public constant CONFIRMATIONS = 6;\n\n    // EVENTS\n    /*\n    * @param _digest block header hash of block header submitted for storage\n    * @param _height height of the stored block\n    */\n    event StoreHeader(bytes32 indexed _digest, uint256 indexed _height);\n    /*\n    * @param _from previous best block hash\n    * @param _to new best block hash\n    * @param _id identifier of the fork triggering the reorg\n    */\n    event ChainReorg(bytes32 indexed _from, bytes32 indexed _to, uint256 indexed _id);\n\n    // EXCEPTION MESSAGES\n    // OPTIMIZATION: limit string length to 32 bytes\n    string constant ERR_INVALID_HEADER_SIZE = \"Invalid block header size\";\n    string constant ERR_DUPLICATE_BLOCK = \"Block already stored\";\n    string constant ERR_PREVIOUS_BLOCK = \"Previous block hash not found\";\n    string constant ERR_LOW_DIFFICULTY = \"Insufficient difficulty\";\n    string constant ERR_DIFF_TARGET_HEADER = \"Incorrect difficulty target\";\n    string constant ERR_DIFF_PERIOD = \"Invalid difficulty period\";\n    string constant ERR_NOT_EXTENSION = \"Not extension of chain\";\n    string constant ERR_BLOCK_NOT_FOUND = \"Block not found\";\n    string constant ERR_CONFIRMS = \"Insufficient confirmations\";\n    string constant ERR_VERIFY_TX = \"Incorrect merkle proof\";\n    string constant ERR_INVALID_TXID = \"Invalid tx identifier\";\n\n    /**\n    * @notice Initializes the relay with the provided block.\n    * @param _header - genesis block header\n    * @param _height - genesis block height\n    */\n    constructor(\n        bytes memory _header,\n        uint256 _height\n    ) public {\n        require(_header.length == 80, ERR_INVALID_HEADER_SIZE);\n        bytes32 digest = _header.hash256();\n        bytes32 merkle = _header.extractMerkleRootLE().toBytes32();\n        uint256 target = _header.extractTarget();\n        uint256 timestamp = _header.extractTimestamp();\n        uint256 chainId = MAIN_CHAIN_ID;\n        uint256 difficulty = _header.extractDifficulty();\n\n        bestBlock = digest;\n        bestScore = difficulty;\n        bestHeight = _height;\n\n        forks[chainId].height = _height;\n        chain[_height] = digest;\n\n        epochStartTarget = target;\n        epochStartTime = timestamp;\n\n        storeBlockHeader(\n            digest,\n            merkle,\n            _height,\n            target,\n            timestamp,\n            chainId,\n            difficulty\n        );\n    }\n\n    /**\n    * @notice Parses, validates and stores Bitcoin block header1 to mapping\n    * @param _header Raw Bitcoin block header bytes (80 bytes)\n    * @return bytes32 Bitcoin-like double sha256 hash of submitted block\n    */\n    function submitBlockHeader(bytes memory _header) public returns (bytes32) {\n        require(_header.length == 80, ERR_INVALID_HEADER_SIZE);\n\n        bytes32 hashPrevBlock = _header.extractPrevBlockLE().toBytes32();\n        bytes32 hashCurrBlock = _header.hash256();\n\n        // Fail if block already exists\n        // Time is always set in block header struct (prevBlockHash and height can be 0 for Genesis block)\n        require(headers[hashCurrBlock].merkle == 0, ERR_DUPLICATE_BLOCK);\n\n        // Fail if previous block hash not in current state of main chain\n        require(headers[hashPrevBlock].merkle != 0, ERR_PREVIOUS_BLOCK);\n\n        uint256 target = _header.extractTarget();\n\n        // Check the PoW solution matches the target specified in the block header\n        require(abi.encodePacked(hashCurrBlock).reverseEndianness().bytesToUint() <= target, ERR_LOW_DIFFICULTY);\n\n        uint256 _height = 1 + headers[hashPrevBlock].height;\n        uint256 timestamp = _header.extractTimestamp();\n\n        // Check the specified difficulty target is correct\n        (bool valid, bool update) = isCorrectDifficultyTarget(\n            epochStartTarget,\n            epochStartTime,\n            headers[hashPrevBlock].target,\n            headers[hashPrevBlock].timestamp,\n            target,\n            _height\n        );\n\n        require(valid, ERR_DIFF_TARGET_HEADER);\n        if (update) {\n            epochStartTarget = target;\n            epochStartTime = timestamp;\n        }\n\n        bytes32 merkle = _header.extractMerkleRootLE().toBytes32();\n        uint256 chainWork = headers[hashPrevBlock].chainWork + _header.extractDifficulty();\n\n        uint256 chainId = headers[hashPrevBlock].chainId;\n        bool isNewFork = forks[chainId].height != headers[hashPrevBlock].height;\n\n        if (isNewFork) {\n            chainId = incrementChainCounter();\n\n            bytes32[] memory _descendants = new bytes32[](1);\n            _descendants[0] = hashCurrBlock;\n\n            // Initialise fork\n            forks[chainId] = Fork({\n                height: _height,\n                ancestor: hashPrevBlock,\n                descendants: _descendants\n            });\n\n            storeBlockHeader(\n                hashCurrBlock,\n                merkle,\n                _height,\n                target,\n                timestamp,\n                chainId,\n                chainWork\n            );\n        } else {\n            storeBlockHeader(\n                hashCurrBlock,\n                merkle,\n                _height,\n                target,\n                timestamp,\n                chainId,\n                chainWork\n            );\n\n            if (chainId == MAIN_CHAIN_ID) {\n                // check that the submitted block is extending the main chain\n                require(chainWork > bestScore, ERR_NOT_EXTENSION);\n\n                bestBlock = hashCurrBlock;\n                bestHeight = _height;\n                bestScore = chainWork;\n\n                // extend height of main chain\n                forks[chainId].height = _height;\n                chain[_height] = hashCurrBlock;\n            } else if (_height >= bestHeight + CONFIRMATIONS) {\n                // reorg fork to main\n                uint256 ancestorId = chainId;\n                uint256 forkId = incrementChainCounter();\n                uint256 forkHeight = _height - 1;\n\n                while (ancestorId != MAIN_CHAIN_ID) {\n                    for (uint i = forks[ancestorId].descendants.length; i > 0; i--) {\n                        // get next descendant in fork\n                        bytes32 _descendant = forks[ancestorId].descendants[i-1];\n                        replaceChainElement(forkHeight, forkId, _descendant);\n                        forkHeight--;\n                    }\n\n                    bytes32 ancestor = forks[ancestorId].ancestor;\n                    ancestorId = headers[ancestor].chainId;\n                }\n\n                emit ChainReorg(bestBlock, hashCurrBlock, chainId);\n\n                bestBlock = hashCurrBlock;\n                bestHeight = _height;\n                bestScore = chainWork;\n\n                // TODO: add new fork struct for old main\n\n                // extend to current head\n                chain[bestHeight] = bestBlock;\n                headers[bestBlock].chainId = MAIN_CHAIN_ID;\n            } else {\n                // extend fork\n                forks[chainId].height = _height;\n                forks[chainId].descendants.push(hashCurrBlock);\n            }\n        }\n    }\n\n    function storeBlockHeader(\n        bytes32 _digest,\n        bytes32 _merkle,\n        uint256 _height,\n        uint256 _target,\n        uint256 _timestamp,\n        uint256 _chainId,\n        uint256 _chainWork\n    ) private {\n        chain[_height] = _digest;\n        headers[_digest] = Header({\n            merkle: _merkle,\n            height: _height,\n            target: _target,\n            timestamp: _timestamp,\n            chainId: _chainId,\n            chainWork: _chainWork\n        });\n        emit StoreHeader(_digest, _height);\n    }\n\n    function incrementChainCounter() internal returns (uint256) {\n        chainCounter = chainCounter.add(1);\n        return chainCounter;\n    }\n\n    function replaceChainElement(uint256 _height, uint256 _id, bytes32 _digest) internal {\n        // promote header to main chain\n        headers[_digest].chainId = MAIN_CHAIN_ID;\n        // demote old header to new fork\n        headers[chain[_height]].chainId = _id;\n        // swap header at height\n        chain[_height] = _digest;\n    }\n\n    /*\n    * @notice checks if the difficulty target should be adjusted at this block height\n    * @param _height block height to be checked\n    * @return true, if block _height is at difficulty adjustment interval, otherwise false\n    */\n    function shouldAdjustDifficulty(uint256 _height) internal pure returns (bool){\n        return _height % DIFFICULTY_ADJUSTMENT_INTERVAL == 0;\n    }\n\n    function isCorrectDifficultyTarget(\n        uint256 prevStartTarget,    // period starting target\n        uint256 prevStartTime,      // period starting timestamp\n        uint256 prevEndTarget,      // period ending target\n        uint256 prevEndTime,        // period ending timestamp\n        uint256 nextTarget,\n        uint256 _height\n    ) public pure returns (bool valid, bool update) {\n        if(!shouldAdjustDifficulty(_height)) {\n            if(nextTarget != prevEndTarget && prevEndTarget != 0) {\n                return (false, false);\n            }\n        } else {\n            require(\n                BTCUtils.calculateDifficulty(prevStartTarget) == BTCUtils.calculateDifficulty(prevEndTarget),\n                ERR_DIFF_PERIOD\n            );\n\n            uint256 expectedTarget = BTCUtils.retargetAlgorithm(\n                prevStartTarget,\n                prevStartTime,\n                prevEndTime\n            );\n\n            return ((nextTarget & expectedTarget) == nextTarget, true);\n        }\n        return (true, false);\n    }\n\n    function getHeaderByHash(bytes32 _digest) public view returns (\n        uint256 height,\n        bytes32 merkle,\n        uint256 target,\n        uint256 time\n    ) {\n        Header storage head = headers[_digest];\n        require(head.merkle > 0, ERR_BLOCK_NOT_FOUND);\n        time = head.timestamp;\n        merkle = head.merkle;\n        target = head.target;\n        height = head.height;\n        return(height, merkle, target, time);\n    }\n\n    function getHashAtHeight(uint256 _height) public view returns (bytes32) {\n        bytes32 _digest = chain[_height];\n        require(_digest > 0, ERR_BLOCK_NOT_FOUND);\n        return _digest;\n    }\n\n    /**\n    * @notice verifies that a transaction is included in a block\n    * @param _height height of block that included transaction\n    * @param _index index of transaction in the block's tx merkle tree\n    * @param _txid transaction identifier\n    * @param _proof merkle proof\n    * @param _confirmations required confirmations (insecure)\n    * @param _insecure check custom inclusion confirmations\n    * @return true if _txid is included, false otherwise\n    */\n    function verifyTx(\n        uint256 _height,\n        uint256 _index,\n        bytes32 _txid,\n        bytes calldata _proof,\n        uint256 _confirmations,\n        bool _insecure\n    ) external view returns(bool) {\n        require(_txid != 0, ERR_INVALID_TXID);\n\n        if (_insecure) {\n            require(\n                _height + _confirmations <= bestHeight,\n                ERR_CONFIRMS\n            );\n        } else {\n            require(\n                _height + CONFIRMATIONS <= bestHeight,\n                ERR_CONFIRMS\n            );\n        }\n\n        bytes32 _root = headers[chain[_height]].merkle;\n        require(\n            ValidateSPV.prove(\n                _txid,\n                _root,\n                _proof,\n                _index\n            ),\n            ERR_VERIFY_TX\n        );\n\n        return true;\n    }\n}\n"
    },
    "@summa-tx/bitcoin-spv-sol/contracts/ValidateSPV.sol": {
      "content": "pragma solidity ^0.5.10;\n\n/** @title ValidateSPV*/\n/** @author Summa (https://summa.one) */\n\nimport {BytesLib} from \"./BytesLib.sol\";\nimport {SafeMath} from \"./SafeMath.sol\";\nimport {BTCUtils} from \"./BTCUtils.sol\";\n\n\nlibrary ValidateSPV {\n\n    using BTCUtils for bytes;\n    using BTCUtils for uint256;\n    using BytesLib for bytes;\n    using SafeMath for uint256;\n\n    enum InputTypes { NONE, LEGACY, COMPATIBILITY, WITNESS }\n    enum OutputTypes { NONE, WPKH, WSH, OP_RETURN, PKH, SH, NONSTANDARD }\n\n    uint256 constant ERR_BAD_LENGTH = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    uint256 constant ERR_INVALID_CHAIN = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe;\n    uint256 constant ERR_LOW_WORK = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd;\n\n    function getErrBadLength() internal pure returns (uint256) {\n        return ERR_BAD_LENGTH;\n    }\n\n    function getErrInvalidChain() internal pure returns (uint256) {\n        return ERR_INVALID_CHAIN;\n    }\n\n    function getErrLowWork() internal pure returns (uint256) {\n        return ERR_LOW_WORK;\n    }\n\n    /// @notice                     Validates a tx inclusion in the block\n    /// @dev                        `index` is not a reliable indicator of location within a block\n    /// @param _txid                The txid (LE)\n    /// @param _merkleRoot          The merkle root (as in the block header)\n    /// @param _intermediateNodes   The proof's intermediate nodes (digests between leaf and root)\n    /// @param _index               The leaf's index in the tree (0-indexed)\n    /// @return                     true if fully valid, false otherwise\n    function prove(\n        bytes32 _txid,\n        bytes32 _merkleRoot,\n        bytes memory _intermediateNodes,\n        uint _index\n    ) internal pure returns (bool) {\n        // Shortcut the empty-block case\n        if (_txid == _merkleRoot && _index == 0 && _intermediateNodes.length == 0) {\n            return true;\n        }\n\n        bytes memory _proof = abi.encodePacked(_txid, _intermediateNodes, _merkleRoot);\n        // If the Merkle proof failed, bubble up error\n        return _proof.verifyHash256Merkle(_index);\n    }\n\n    /// @notice             Hashes transaction to get txid\n    /// @dev                Supports Legacy and Witness\n    /// @param _version     4-bytes version\n    /// @param _vin         Raw bytes length-prefixed input vector\n    /// @param _vout        Raw bytes length-prefixed output vector\n    /// @param _locktime   4-byte tx locktime\n    /// @return             32-byte transaction id, little endian\n    function calculateTxId(\n        bytes memory _version,\n        bytes memory _vin,\n        bytes memory _vout,\n        bytes memory _locktime\n    ) internal pure returns (bytes32) {\n        // Get transaction hash double-Sha256(version + nIns + inputs + nOuts + outputs + locktime)\n        return abi.encodePacked(_version, _vin, _vout, _locktime).hash256();\n    }\n\n    /// @notice             Checks validity of header chain\n    /// @notice             Compares the hash of each header to the prevHash in the next header\n    /// @param _headers     Raw byte array of header chain\n    /// @return             The total accumulated difficulty of the header chain, or an error code\n    function validateHeaderChain(bytes memory _headers) internal view returns (uint256 _totalDifficulty) {\n\n        // Check header chain length\n        if (_headers.length % 80 != 0) {return ERR_BAD_LENGTH;}\n\n        // Initialize header start index\n        bytes32 _digest;\n\n        _totalDifficulty = 0;\n\n        for (uint256 _start = 0; _start < _headers.length; _start += 80) {\n\n            // ith header start index and ith header\n            bytes memory _header = _headers.slice(_start, 80);\n\n            // After the first header, check that headers are in a chain\n            if (_start != 0) {\n                if (!validateHeaderPrevHash(_header, _digest)) {return ERR_INVALID_CHAIN;}\n            }\n\n            // ith header target\n            uint256 _target = _header.extractTarget();\n\n            // Require that the header has sufficient work\n            _digest = _header.hash256View();\n            if(uint256(_digest).reverseUint256() > _target) {\n                return ERR_LOW_WORK;\n            }\n\n            // Add ith header difficulty to difficulty sum\n            _totalDifficulty = _totalDifficulty.add(_target.calculateDifficulty());\n        }\n    }\n\n    /// @notice             Checks validity of header work\n    /// @param _digest      Header digest\n    /// @param _target      The target threshold\n    /// @return             true if header work is valid, false otherwise\n    function validateHeaderWork(bytes32 _digest, uint256 _target) internal pure returns (bool) {\n        if (_digest == bytes32(0)) {return false;}\n        return (abi.encodePacked(_digest).reverseEndianness().bytesToUint() < _target);\n    }\n\n    /// @notice                     Checks validity of header chain\n    /// @dev                        Compares current header prevHash to previous header's digest\n    /// @param _header              The raw bytes header\n    /// @param _prevHeaderDigest    The previous header's digest\n    /// @return                     true if the connect is valid, false otherwise\n    function validateHeaderPrevHash(bytes memory _header, bytes32 _prevHeaderDigest) internal pure returns (bool) {\n\n        // Extract prevHash of current header\n        bytes32 _prevHash = _header.extractPrevBlockLE().toBytes32();\n\n        // Compare prevHash of current header to previous header's digest\n        if (_prevHash != _prevHeaderDigest) {return false;}\n\n        return true;\n    }\n}\n"
    },
    "contracts/Script.sol": {
      "content": "pragma solidity ^0.5.15;\n\nimport {BytesLib} from \"@summa-tx/bitcoin-spv-sol/contracts/BytesLib.sol\";\nimport {BTCUtils} from \"@summa-tx/bitcoin-spv-sol/contracts/BTCUtils.sol\";\n\nlibrary Script {\n    using BytesLib for bytes;\n    using BTCUtils for bytes;\n\n    bytes1 constant OP_HASH160 = 0xa9;\n    bytes1 constant OP_EQUAL = 0x87;\n    bytes1 constant OP_DUP = 0x76;\n    bytes1 constant OP_EQUALVERIFY = 0x88;\n    bytes1 constant OP_CHECKSIG = 0xac;\n    bytes1 constant OP_CHECKLOCKTIMEVERIFY = 0xb1;\n    bytes1 constant OP_DROP = 0x75;\n\n    // EXCEPTION MESSAGES\n    string constant ERR_INVALID_SIZE = \"Invalid size\";\n    string constant ERR_INVALID_OPCODE = \"Invalid opcode\";\n\n    // 0x76 (OP_DUP) - 0xa9 (OP_HASH160) - 0x14 (20 bytes len) - <20 bytes pubkey hash> - 0x88 (OP_EQUALVERIFY) - 0xac (OP_CHECKSIG)\n    function isP2PKH(bytes memory _script) internal pure returns (bytes memory) {\n        require(_script.length == 25, ERR_INVALID_SIZE);\n        require(_script[0] == OP_DUP, ERR_INVALID_OPCODE);\n        require(_script[1] == OP_HASH160, ERR_INVALID_OPCODE);\n        require(_script[2] == 0x14, ERR_INVALID_OPCODE); // OP_PUSHDATA\n        require(_script[23] == OP_EQUALVERIFY, ERR_INVALID_OPCODE);\n        require(_script[24] == OP_CHECKSIG, ERR_INVALID_OPCODE);\n        return _script.slice(3, 20);\n    }\n\n\n    // 0xa9 (OP_HASH160) - 0x14 (20 bytes hash) - <20 bytes script hash> - 0x87 (OP_EQUAL)\n    function isP2SH(bytes memory _script) internal pure returns (bytes memory) {\n        require(_script.length == 23, ERR_INVALID_SIZE);\n        require(_script[0] == OP_HASH160, ERR_INVALID_OPCODE);\n        require(_script[1] == 0x14, ERR_INVALID_OPCODE); // OP_PUSHDATA\n        require(_script[22] == OP_EQUAL, ERR_INVALID_OPCODE);\n        return _script.slice(2, 20);\n    }\n\n    // 04 9f7b2a5c b1 75 76 a9 14 371c20fb2e9899338ce5e99908e64fd30b789313 88 ac\n    function isCLTV(bytes memory _script) internal pure returns (uint, bytes memory) {\n        uint varIntLen = _script.determineVarIntDataLength();\n        if (varIntLen == 0) {\n            varIntLen = 1;\n        }\n        uint timeLen = _script.slice(0, varIntLen).bytesToUint();\n        uint timestamp = _script.slice(varIntLen, timeLen).reverseEndianness().bytesToUint();\n        uint pos = varIntLen + timeLen;\n        require(_script.length == pos + 27, ERR_INVALID_SIZE);\n\n        require(_script[pos] == OP_CHECKLOCKTIMEVERIFY, ERR_INVALID_OPCODE);\n        require(_script[pos+1] == OP_DROP, ERR_INVALID_OPCODE);\n        require(_script[pos+2] == OP_DUP, ERR_INVALID_OPCODE);\n        require(_script[pos+3] == OP_HASH160, ERR_INVALID_OPCODE);\n        require(_script[pos+4] == 0x14, ERR_INVALID_OPCODE); // OP_PUSHDATA\n\n        require(_script[pos+5+20] == OP_EQUALVERIFY, ERR_INVALID_OPCODE);\n        require(_script[pos+6+20] == OP_CHECKSIG, ERR_INVALID_OPCODE);\n\n        return (timestamp, _script.slice(pos+5, 20));\n    }\n}"
    },
    "contracts/ScriptDelegate.sol": {
      "content": "pragma solidity ^0.5.15;\n\nimport {Script} from \"./Script.sol\";\n\ncontract ScriptDelegate {\n    using Script for bytes;\n\n    function isP2PKH(bytes memory _script) public pure returns (bytes memory) {\n        return _script.isP2PKH();\n    }\n\n    function isP2SH(bytes memory _script) public pure returns (bytes memory) {\n        return _script.isP2SH();\n    }\n\n    function isCLTV(bytes memory _script) public pure returns (uint time, bytes memory addr) {\n        return _script.isCLTV();\n    }\n}"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ],
        "": [
          "id",
          "ast"
        ]
      }
    }
  }
}